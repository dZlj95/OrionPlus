#ifndef SPINDLE_CONTROLLER_H
#define SPINDLE_CONTROLLER_H

#include <stdint.h>

///////////////////////////////////////////////////////////////////////////////

#include "FreeRTOS.h"
#include "queue.h"
#include "event_groups.h"
#include "timers.h"

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////





///////////////////////////////////////////////////////////////////////////////
#include "GCodeParser.h"
#include "Planner.h"
#include "Conveyor.h"
#include "StepTicker.h"
///////////////////////////////////////////////////////////////////////////////

class SpindleController
{
public:
    SpindleController();
    ~SpindleController();

    bool InmediateStop();   // For halt cases

    inline uint32_t GetCurrentRPM() { return m_current_rpm; };
    inline uint8_t  GetCurrentToolNumber() { return m_current_tool_number; }
    
protected:
    ///////////////////////////////////////////////////////////////////////////////////////////
    uint32_t m_current_rpm;
    uint8_t m_current_tool_number;
};

#endif
